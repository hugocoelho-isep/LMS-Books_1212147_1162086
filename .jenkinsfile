pipeline {
    agent any

    environment {

        MAVEN_HOME = '/usr/share/maven'
        JAVA_HOME = '/usr/lib/jvm/java-21-openjdk-amd64'

        //MAVEN_HOME = '/usr/bin/mvn'
        //JAVA_HOME = '/usr/bin/java/openjdk-21'

        GITHUB_URL = 'https://github.com/hugocoelho-isep/LMS-Books_1212147_1162086.git'
        GITHUB_BRANCH = 'main'
        GITHUB_CREDENTIALS = 'github-credential'


        DOCKER_IMAGE = 'lmsbooks:latest'
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
        DOCKER_USERNAME = 'hugocoelhoisep'
    }

    tools {
        jdk 'JDK 21'
        maven 'Maven'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: "${GITHUB_URL}", branch: "${GITHUB_BRANCH}", credentialsId: "${GITHUB_CREDENTIALS}"
                echo 'Repository checked out successfully.'
            }
        }

        stage('Clean') {
            steps {
                script {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image using the Dockerfile
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {

                        withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                            sh '''
                            echo "Logging in to Docker Hub..."
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

                            echo "Tagging the image..."
                            docker tag ${DOCKER_IMAGE} ${DOCKER_USERNAME}/${DOCKER_IMAGE}

                            echo "Pushing the image..."
                            docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE}
                            '''
                        }
                    }
                }
            }
        }



    }


    post {
        success {
            // Actions to take when the pipeline succeeds
            echo 'Pipeline completed successfully!'
        }
        failure {
            // Actions to take when the pipeline fails
            echo 'Pipeline failed!'
        }
    }
}